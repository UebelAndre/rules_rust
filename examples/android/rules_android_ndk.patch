diff --git a/rules.bzl b/rules.bzl
index 9f76a87..52d2d04 100644
--- a/rules.bzl
+++ b/rules.bzl
@@ -14,6 +14,19 @@
 
 """A repository rule for integrating the Android NDK."""
 
+def _get_clang_resource_dir(ctx, clang_directory, is_windows):
+    clang_resource_dir = getattr(ctx.attr, "clang_resource_dir")
+    if clang_resource_dir:
+        return clang_resource_dir
+
+    result = ctx.execute([clang_directory + "/bin/clang", "--print-resource-dir"])
+    if result.return_code != 0:
+        fail("Failed to execute clang: %s" % result.stderr)
+    stdout = result.stdout.strip()
+    if is_windows:
+        stdout = stdout.replace("\\", "/")
+    return stdout.split(clang_directory)[1].strip("/")
+
 def _android_ndk_repository_impl(ctx):
     """Install the Android NDK files.
 
@@ -23,7 +36,10 @@ def _android_ndk_repository_impl(ctx):
     Returns:
         A final dict of configuration attributes and values.
     """
-    ndk_path = ctx.attr.path or ctx.os.environ.get("ANDROID_NDK_HOME", None)
+    if hasattr(ctx.attr, "anchor"):
+        ndk_path = ctx.path(Label(ctx.attr.anchor)).dirname
+    else:
+        ndk_path = ctx.attr.path or ctx.getenv("ANDROID_NDK_HOME", None)
     if not ndk_path:
         fail("Either the ANDROID_NDK_HOME environment variable or the " +
              "path attribute of android_ndk_repository must be set.")
@@ -32,12 +48,13 @@ def _android_ndk_repository_impl(ctx):
 
     is_windows = False
     executable_extension = ""
-    if ctx.os.name == "linux":
+    platform = getattr(ctx.attr, "platform", ctx.os.name)
+    if platform == "linux":
         clang_directory = "toolchains/llvm/prebuilt/linux-x86_64"
-    elif ctx.os.name == "mac os x":
+    elif platform.startswith(("mac", "darwin")):
         # Note: darwin-x86_64 does indeed contain fat binaries with arm64 slices, too.
         clang_directory = "toolchains/llvm/prebuilt/darwin-x86_64"
-    elif ctx.os.name.startswith("windows"):
+    elif platform.startswith("windows"):
         clang_directory = "toolchains/llvm/prebuilt/windows-x86_64"
         is_windows = True
         executable_extension = ".exe"
@@ -50,13 +67,7 @@ def _android_ndk_repository_impl(ctx):
 
     api_level = ctx.attr.api_level or 31
 
-    result = ctx.execute([clang_directory + "/bin/clang", "--print-resource-dir"])
-    if result.return_code != 0:
-        fail("Failed to execute clang: %s" % result.stderr)
-    stdout = result.stdout.strip()
-    if is_windows:
-        stdout = stdout.replace("\\", "/")
-    clang_resource_directory = stdout.split(clang_directory)[1].strip("/")
+    clang_resource_directory = _get_clang_resource_dir(ctx, clang_directory, is_windows)
 
     # Use a label relative to the workspace from which this repository rule came
     # to get the workspace name.
@@ -127,6 +138,23 @@ def _create_symlinks(ctx, ndk_path, clang_directory, sysroot_directory):
 android_ndk_repository = repository_rule(
     attrs = {
         "path": attr.string(),
+        "platform": attr.string(),
+        "api_level": attr.int(),
+        "_build": attr.label(default = ":BUILD", allow_single_file = True),
+        "_template_ndk_root": attr.label(default = ":BUILD.ndk_root.tpl", allow_single_file = True),
+        "_template_target_systems": attr.label(default = ":target_systems.bzl.tpl", allow_single_file = True),
+        "_template_ndk_clang": attr.label(default = ":BUILD.ndk_clang.tpl", allow_single_file = True),
+        "_template_ndk_sysroot": attr.label(default = ":BUILD.ndk_sysroot.tpl", allow_single_file = True),
+    },
+    local = True,
+    implementation = _android_ndk_repository_impl,
+)
+
+android_remote_ndk_repository = repository_rule(
+    attrs = {
+        "anchor": attr.string(mandatory = True),
+        "platform": attr.string(mandatory = True),
+        "clang_resource_dir": attr.string(mandatory = True),
         "api_level": attr.int(),
         "_build": attr.label(default = ":BUILD", allow_single_file = True),
         "_template_ndk_root": attr.label(default = ":BUILD.ndk_root.tpl", allow_single_file = True),
